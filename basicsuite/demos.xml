<?xml version="1.0" encoding="UTF-8"?>

<applications>
<!--
<application title="About Qt for Device Creation" priority="10" location="/data/user/qt/about-b2qt" main="main.qml" icon="/data/user/qt/about-b2qt/preview_l.jpg">
<description>
Provides an introduction to what Qt for Device Creation is all about.
</description>
</application>

<application title="Camera" location="/data/user/qt/camera" main="main.qml" icon="/data/user/qt/camera/preview_l.jpg" exclude="linux-jetson-tx1;linux-beagleboard;linux-beaglebone;linux-raspberrypi;linux-emulator;linux-apalis-imx6;linux-colibri-vf">
<description>
This example demonstrates the use of the camera features of Qt Multimedia with Qt Quick.

Demo can be used to take photos which are saved in the /data/images/ directory. Camera parameters such as flash mode, scene mode or white balance can be changed. The availability of parameters depends on what the camera driver provides.
</description>
</application>

<application title="Qt Canvas3D - Planets" location="/data/user/qt/canvas3d-planets" main="main.qml" icon="/data/user/qt/canvas3d-planets/preview_l.jpg" exclude="linux-emulator;linux-raspberrypi3;linux-raspberrypi2;linux-raspberrypi;linux-beaglebone;linux-colibri-vf">
<description>
The Planets example showcases Qt Canvas 3D. This demo combines WebGL code and three.js with QML and Qt Quick Controls.
</description>
</application>
-->

<application title="Qt Charts - Gallery" location="/data/user/qt/enterprise-charts" main="main.qml" icon="/data/user/qt/enterprise-charts/preview_l.jpg">
<description>
This demo presents different types of charts that are available from Qt Charts library.

Qt Charts is part of the Qt Enterprise addons package which provides a set of easy to use chart components. It uses the Qt Graphics View Framework, therefore charts can be easily integrated to modern user interfaces. Qt Charts can be used as QWidgets, QGraphicsWidget, or QML types.
</description>
</application>

<!--
<application title="Qt Quick Extras Dashboard" location="/data/user/qt/enterprise-dashboard" main="main.qml" icon="/data/user/qt/enterprise-dashboard/preview_l.jpg">
<description>
The dashboard demo uses Qt Quick Extras to create a digital dashboard for a car.
</description>
</application>

<application title="Qt Quick Controls - Flat Style Gallery" location="/data/user/qt/enterprise-flat-controls" main="main.qml" icon="/data/user/qt/enterprise-flat-controls/preview_l.jpg">
<description>
The Flat Style Gallery example showcases the Qt Quick Controls. This demo combines both the standard Qt Quick Controls as well as the Qt Quick Extras both of which are using the new Flat style. The Flat style for Qt Quick Controls has a modern look and feel and is perfect for the touch driven interfaces commonly developed by device creators.
</description>
</application>

<application title="Qt Data Visualization 3D - Surface Multiseries" location="/data/user/qt/enterprise-qtdatavis3d" main="main.qml" icon="/data/user/qt/enterprise-qtdatavis3d/preview_l.jpg" exclude="linux-raspberrypi;linux-raspberrypi2;linux-raspberrypi3;linux-colibri-vf">
<description>
Shows how to make a 3D surface plot, displaying three layers from three different height map images using Surface3D with Qt Quick.
</description>
</application>
-->

<application title="Graphical Effects" location="/data/user/qt/graphicaleffects" main="main.qml" icon="/data/user/qt/graphicaleffects/preview_l.jpg" exclude="linux-beaglebone;linux-colibri-vf;linux-colibri-imx7;linux-imx7s-warp;linux-nitrogen7;linux-colibri-imx6ull">
<description>
This example shows the Qt Quick ShaderEffect type and the Qt Graphical Effects module. Qt Quick provides the ability to use inline GLSL in your Qt Quick applications to create stunning visual effects.

However, as UIs typically reuse many of the same effects, the Qt Graphical Effects module provides a set of predefined, commonly used effects. This includes blur, drop-shadows, glow, blending, opacity masks, and more.
</description>
</application>

<application title="Media Player" location="/data/user/qt/mediaplayer" main="main.qml" icon="/data/user/qt/mediaplayer/preview_l.jpg" exclude="linux-beaglebone;linux-colibri-vf;linux-colibri-imx6ull">
<description>
The Media Player example demonstrates the use of media playback features provided by Qt Multimedia with Qt Quick.

It can play content either from a file or a network source, both videos and music.
</description>
</application>

<!--
<application title="Qt5 Cinematic Demo" location="/data/user/qt/qt5-cinematicdemo" main="main.qml" icon="/data/user/qt/qt5-cinematicdemo/preview_l.jpg">
<description>
The Qt 5 Cinematic Experience is a demo by "QUIt Coding".

The demo shows off a number features of Qt Quick. A nicely styled list control of movie covers with lighting effects, particles and transitions. The information roll-down curvy curtain is implemented using inline GLSL in the QML file. The source code for this demo and more awesome looking Qt Quick examples are available from quitcoding.com.
</description>
</application>
-->

<application title="Web Browser" location="/data/user/qt/qtwebbrowser" main="main.qml" icon="/data/user/qt/qtwebbrowser/preview_l.jpg" exclude="linux-emulator;linux-raspberrypi;linux-beaglebone;linux-colibri-vf;linux-colibri-imx7;linux-imx7s-warp;linux-nitrogen7;linux-colibri-imx6ull">
<description>
This example demonstrates the use of Qt WebEngine with Qt Quick.

Demo can be used to browse the internet (working network connection required) or run the offline web page demos.
</description>
</application>

<application title="Virtual Keyboard" location="/data/user/qt/textinput" main="main.qml" icon="/data/user/qt/textinput/preview_l.jpg">
<description>
This example illustrates how to handle input on touch devices.

Qt for Device Creation comes with Qt Virtual Keyboard - a framework that consists of a C++ backend with support for custom input methods, as well as a reference keyboard front end implemented in QML, supporting multiple languages.
</description>
</application>

<application title="E-Bike" location="/data/user/qt/ebike-ui" main="main.qml" icon="/data/user/qt/ebike-ui/preview_l.jpg">
<description>
An E-bike instrument cluster concept designed and implemented by Qt.

The entire concept is a testament that Qt brings the HMI designers and Software engineers together by using the same tools, allowing them to fast prototyping through collaborative workflow. In addition to that, Qt is optimized for running on low end SoC even the ones that don't have GPU acceleration for graphics.
</description>
</application>

<application title="Quick Controls 2" location="/data/user/qt/qtquickcontrols2" main="main.qml" icon="/data/user/qt/qtquickcontrols2/preview_l.jpg">
<description>
The gallery example is a simple application with a drawer menu that contains all the Qt Quick Controls 2.

Each menu item opens a page that shows the graphical appearance of a control, allows you to interact with the control, and explains in which circumstances it is handy to use this control.
</description>
</application>

<application title="Advanced custom materials" location="/data/user/qt/custommaterial" main="main.qml" icon="/data/user/qt/custommaterial/preview_l.jpg" exclude="linux-beaglebone;linux-colibri-vf;linux-colibri-imx7;linux-imx7s-warp;linux-nitrogen7;linux-colibri-imx6ull">
<description>
This example demonstrates advanced materials in Qt3D.

Demo shows complex shaders and demonstrates controlling your shader properties with QtQuick user interface and Animation. Water is a 3D mesh, that is modeled and uv mapped inside Blender, and then brought into Scene 3D as an .obj file.
</description>
</application>

</applications>
